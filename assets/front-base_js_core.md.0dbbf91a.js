import{_ as s,o as a,c as n,O as l}from"./chunks/framework.b9480850.js";const p="/blog/assets/js_core_prototype.afa0e0cb.jpeg",o="/blog/assets/js_core_async.907f4fde.jpeg",e="/blog/assets/js_core_process.197440af.jpeg",r="/blog/assets/js_core_tick.842da1f3.jpeg",E=JSON.parse('{"title":"JavaScript 核心","description":"","frontmatter":{},"headers":[],"relativePath":"front-base/js/core.md","filePath":"front-base/js/core.md","lastUpdated":1683961544000}'),c={name:"front-base/js/core.md"},t=l('<h1 id="javascript-核心" tabindex="-1">JavaScript 核心 <a class="header-anchor" href="#javascript-核心" aria-label="Permalink to &quot;JavaScript 核心&quot;">​</a></h1><h2 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-label="Permalink to &quot;作用域&quot;">​</a></h2><ul><li>全局作用域</li><li>函数作用域 <ul><li>执行上下文</li><li>词法作用域</li></ul></li><li>块级作用域</li><li>闭包 <ul><li>有权访问另一个函数作用域中变量的函数。</li><li>通常用于保存函数内部状态，创建私有变量。</li><li>实现一些高级编程技巧，比如函数科里化、事件委托、惰性求值。</li></ul></li><li>作用域链 <ul><li>作用域链是一个变量查找机制。</li><li>js 引擎需要查找一个变量时，它会先在当前执行上下文中查找，如果找不到，则向上遍历作用域链，直到全局执行上下文为止。</li></ul></li></ul><h2 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-label="Permalink to &quot;原型链&quot;">​</a></h2><p>一个实例对象在调用属性和方法的时候，会依次从实例本身，构造函数的原型、构造函数的原型的原型...查找是否有对应的方法和属性。 这种查找方式就好像一个链条一样，专业上称之为原型链。</p><p><img src="'+p+'" alt="&#39;原型&#39;"></p><h2 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h2><h3 id="浏览器异步执行原理" tabindex="-1">浏览器异步执行原理 <a class="header-anchor" href="#浏览器异步执行原理" aria-label="Permalink to &quot;浏览器异步执行原理&quot;">​</a></h3><p><strong>js 是单线程，也就是说同一时刻只能做一件事情。</strong> 浏览器是多线程的，当 js 需要执行异步任务时，浏览器会开启另外一个线程去执行该任务。</p><p><img src="'+o+'" alt="&#39;异步&#39;"></p><p>浏览器有多个进程，如渲染进程，GPU进程，网络进程等。每一个 tab 页都是一个渲染进程。 <strong>渲染进程主要包括了 JS引擎线程、HTTP请求线程、定时器线程等。这些线程为 js 在浏览器中完成异步任务提供了基础。</strong></p><p><img src="'+e+'" alt="&#39;进程&#39;"></p><h3 id="事件驱动浅析" tabindex="-1">事件驱动浅析 <a class="header-anchor" href="#事件驱动浅析" aria-label="Permalink to &quot;事件驱动浅析&quot;">​</a></h3><p>浏览器异步任务的执行原理背后其实是一套事件驱动的机制。事件触发、任务选择和任务执行都是由事件驱动机制完成的。 <strong>事件循环其实是在事件驱动模式中管理和执行事件的一套流程。</strong></p><h3 id="执行栈和任务队列" tabindex="-1">执行栈和任务队列 <a class="header-anchor" href="#执行栈和任务队列" aria-label="Permalink to &quot;执行栈和任务队列&quot;">​</a></h3><p>JS 在执行的时候会把同步代码放到执行栈中，然后依次执行函数。当遇到异步任务时就交给其它线程去处理，待当前执行栈所有的同步代码执行完毕后 会从一个队列中去取出已完成的异步任务的回调加入执行栈中继续执行。</p><p>JS 按顺序执行执行栈中的方法。每次执行一个方法时，会为这个方法生成独有的执行环境(上下文 context)，待这个方法执行完毕后，销毁当前的执行环境 并从栈中弹出此方法。继续执行下一个方法</p><p><img src="'+r+`" alt="&#39;执行栈&#39;"></p><p>事件驱动模式下，至少包含一个执行循环去检测任务队列是否有新的任务。不断的循环去取异步任务的回调来执行， 这个过程就是事件循环，每一次循环就是一个事件周期或称为一次 tick。</p><h3 id="宏任务和微任务" tabindex="-1">宏任务和微任务 <a class="header-anchor" href="#宏任务和微任务" aria-label="Permalink to &quot;宏任务和微任务&quot;">​</a></h3><p>任务队列不止一个，根据任务种类不同，可分为微任务队列和宏任务队列。</p><p>事件循环的过程中，执行栈在同步代码执行完成后，优先检查微任务队列是否有任务执行，如果没有，再去宏任务队列检查是否有任务执行，如此反复。 <strong>微任务一般比宏任务先执行，并且微任务队列只有一个，宏任务队列可能有多个。</strong></p><h4 id="常见宏任务" tabindex="-1">常见宏任务 <a class="header-anchor" href="#常见宏任务" aria-label="Permalink to &quot;常见宏任务&quot;">​</a></h4><ul><li>setTimeout()</li><li>setInterval()</li><li>setImmediate()</li></ul><h4 id="常见微任务" tabindex="-1">常见微任务 <a class="header-anchor" href="#常见微任务" aria-label="Permalink to &quot;常见微任务&quot;">​</a></h4><ul><li>promise.then()</li><li>new MutationObserver()</li><li>process.nextTick()</li></ul><p>宏任务与微任务的区别</p><ul><li><strong>宏任务：</strong> 有明确的异步任务需要执行和回调，需要其它异步线程支持。</li><li><strong>微任务：</strong> 没有明确的异步任务需要执行，只有回调，不需要其他异步线程支持。</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">setTimeout</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">5</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">new</span><span style="color:#DBD7CAEE;"> </span><span style="color:#B8A965;">Promise</span><span style="color:#666666;">((</span><span style="color:#BD976A;">resolve</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">6</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#80A665;">resolve</span><span style="color:#666666;">();</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">}).</span><span style="color:#80A665;">then</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">8</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">})</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">7</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#666666;">},</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">0</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#CB7676;">function</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">promise2</span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">return</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">new</span><span style="color:#DBD7CAEE;"> </span><span style="color:#B8A965;">Promise</span><span style="color:#666666;">((</span><span style="color:#BD976A;">resolve</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">2</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#80A665;">resolve</span><span style="color:#666666;">();</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">})</span></span>
<span class="line"><span style="color:#666666;">}</span></span>
<span class="line"><span style="color:#CB7676;">async</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">function</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">async1</span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">await</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">promise2</span><span style="color:#666666;">();</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">4</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#666666;">}</span></span>
<span class="line"><span style="color:#80A665;">async1</span><span style="color:#666666;">();</span></span>
<span class="line"><span style="color:#BD976A;">console</span><span style="color:#666666;">.</span><span style="color:#80A665;">log</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">3</span><span style="color:#666666;">);</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">5</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#998418;">Promise</span><span style="color:#999999;">((</span><span style="color:#B07D48;">resolve</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">6</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">resolve</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}).</span><span style="color:#59873A;">then</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">8</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">7</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">promise2</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#998418;">Promise</span><span style="color:#999999;">((</span><span style="color:#B07D48;">resolve</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">2</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">resolve</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#AB5959;">async</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">async1</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">await</span><span style="color:#393A34;"> </span><span style="color:#59873A;">promise2</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">4</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#59873A;">async1</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">3</span><span style="color:#999999;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="垃圾回收" tabindex="-1">垃圾回收 <a class="header-anchor" href="#垃圾回收" aria-label="Permalink to &quot;垃圾回收&quot;">​</a></h2><h2 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h2>`,31),y=[t];function i(A,D,b,u,h,d){return a(),n("div",null,y)}const B=s(c,[["render",i]]);export{E as __pageData,B as default};

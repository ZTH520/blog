import{_ as e,c as t,o,a2 as r}from"./chunks/framework.YPCx1-R1.js";const u=JSON.parse('{"title":"各种场景","description":"","frontmatter":{},"headers":[],"relativePath":"interview/business/scene.md","filePath":"interview/business/scene.md","lastUpdated":1708330623000}'),a={name:"interview/business/scene.md"},s=r('<h1 id="各种场景" tabindex="-1">各种场景 <a class="header-anchor" href="#各种场景" aria-label="Permalink to &quot;各种场景&quot;">​</a></h1><h2 id="浏览器" tabindex="-1">浏览器 <a class="header-anchor" href="#浏览器" aria-label="Permalink to &quot;浏览器&quot;">​</a></h2><ol><li><strong>如何在不使用websocket的情况下实现本地多标签页间的聊天室通信？</strong><ul><li><strong>SharedWorker:</strong> SharedWorker 是一种可以被多个脚本（即多个浏览器标签页、内嵌框架或者Worker）共享的 Web Worker。通过 SharedWorker 不同的标签页可以共享同一个工作线程，从而实现数据的交换和通信。</li><li><strong>Broadcast Channel API:</strong> 这是一个允许我们向同源的不同浏览器标签页、iframe 或者窗口发送消息的API。通过创建一个 BroadcastChannel 对象，不同的标签页可以订阅同一个频道并相互通信。</li><li><strong>LocalStorage/SessionStorage:</strong> 当一个标签页对 LocalStorage 或 SessionStorage 进行更新时，其他标签页可以通过监听 <code>storage</code> 事件来获取更新。</li><li><strong>IndexedDB:</strong> IndexedDB是运行在浏览器上的非关系型数据库，可以用来存储大量数据。通过IndexedDB，不同的标签页可以共享数据，并通过监听数据库的变化来实现通信。</li><li><strong>轮询(Polling):</strong> 轮询是一种服务器和客户端通信的技术，客户端定期向服务器发送请求并接收响应。虽然这种方法效率较低，但在没有WebSocket的情况下，它可以作为一种替代方案。</li></ul></li></ol>',3),n=[s];function i(l,c,d,_,h,g){return o(),t("div",null,n)}const m=e(a,[["render",i]]);export{u as __pageData,m as default};
